{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.26.170.59819",
      "templateHash": "3048114815920686297"
    }
  },
  "parameters": {
    "projectName": {
      "type": "string",
      "defaultValue": "hivemq",
      "minLength": 3,
      "maxLength": 7,
      "metadata": {
        "description": "Specifies a project name that is used for generating resource names. It must only contain lowercase letters and numbers and will be used as a prefix."
      }
    },
    "hivemqVersion": {
      "type": "string",
      "defaultValue": "4.28.0",
      "minLength": 5,
      "metadata": {
        "description": "Specifies HiveMQ version you want to install. (eg. 4.9.19 or 4.28.0)"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Specifies the location for all of the resources created by this deployment."
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Specifies the Virtual Machine administrator username."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Specifies the Virtual Machine administrator password."
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_F4s_v2 - 4 vcpus, 8 GiB memory",
      "allowedValues": [
        "Standard_F4s_v2 - 4 vcpus, 8 GiB memory",
        "Standard_F8s_v2 - 8 vcpus, 16 GiB memory ",
        "Standard_F16s_v2 - 16 vcpus, 32 GiB memory",
        "Standard_F32s_v2 - 32 vcpus, 64 GiB memory",
        "Standard_F48s_v2 - 48 vcpus, 96 GiB memory",
        "Standard_F64s_v2 - 64 vcpus, 128 GiB memory"
      ],
      "metadata": {
        "description": "Size of the Virtual Machines. Note that greater resources will incur higher costs."
      }
    },
    "HivemqClusterSize": {
      "type": "string",
      "defaultValue": "2 nodes",
      "allowedValues": [
        "2 nodes",
        "3 nodes",
        "4 nodes",
        "5 nodes",
        "6 nodes",
        "7 nodes",
        "8 nodes"
      ],
      "metadata": {
        "description": "Select the number of HiveMQ Cluster nodes to deploy."
      }
    },
    "enableAcceleratedNetworking": {
      "type": "string",
      "defaultValue": "Yes",
      "allowedValues": [
        "Yes",
        "No"
      ],
      "metadata": {
        "description": "Accelerated Networking on VMs significantly enhances HiveMQ intracluster communication when the VMs are within the same vNet"
      }
    },
    "OperatingSystem": {
      "type": "string",
      "defaultValue": "Windows Server 2022 Datacenter Azure Edition",
      "allowedValues": [
        "Windows Server 2016 Datacenter",
        "Windows Server 2016 Datacenter Core",
        "Windows Server 2019 Datacenter",
        "Windows Server 2019 Datacenter Core",
        "Windows Server 2022 Datacenter",
        "Windows Server 2022 Datacenter Azure Edition",
        "Windows Server 2022 Datacenter Azure Edition Core"
      ],
      "metadata": {
        "description": "The Windows version for the VM. This will pick a fully patched image of this given Windows version."
      }
    },
    "securityType": {
      "type": "string",
      "defaultValue": "Standard (Basic Level)",
      "allowedValues": [
        "Standard (Basic Level)",
        "Trusted launch virtual machines"
      ],
      "metadata": {
        "description": "Security Type of the Virtual Machine."
      }
    },
    "DeployAzureBastion": {
      "type": "string",
      "defaultValue": "Yes - Basic SKU (Browser access)",
      "allowedValues": [
        "No",
        "Yes - Basic SKU (Browser access)",
        "Yes - Standard SKU (RDP Native Client access)"
      ],
      "metadata": {
        "description": "Select whether to deploy Azure Bastion and specify the SKU if deployment is desired. Azure Bastion allows you access to Windows Server VMs without any exposure through public IP addresses"
      }
    }
  },
  "variables": {
    "vmSizeMap": {
      "Standard_F4s_v2 - 4 vcpus, 8 GiB memory": "Standard_F4s_v2",
      "Standard_F8s_v2 - 8 vcpus, 16 GiB memory": "Standard_F8s_v2",
      "Standard_F16s_v2 - 16 vcpus, 32 GiB memory": "Standard_F16s_v2",
      "Standard_F32s_v2 - 32 vcpus, 64 GiB memory": "Standard_F32s_v2",
      "Standard_F48s_v2 - 48 vcpus, 96 GiB memory": "Standard_F48s_v2",
      "Standard_F64s_v2 - 64 vcpus, 128 GiB memory": "Standard_F64s_v2"
    },
    "virtualMachineSizeSpecs": "[variables('vmSizeMap')[parameters('vmSize')]]",
    "nodeCountMap": {
      "2 nodes": 2,
      "3 nodes": 3,
      "4 nodes": 4,
      "5 nodes": 5,
      "6 nodes": 6,
      "7 nodes": 7,
      "8 nodes": 8
    },
    "numberOfHivemqNodes": "[variables('nodeCountMap')[parameters('HivemqClusterSize')]]",
    "AcceleratedNetworkingMap": {
      "Yes": true,
      "No": false
    },
    "AcceleratedNetworkingSelection": "[variables('AcceleratedNetworkingMap')[parameters('enableAcceleratedNetworking')]]",
    "osVersionMap": {
      "Windows Server 2016 Datacenter": "2016-Datacenter",
      "Windows Server 2016 Datacenter Core": "2016-Datacenter-Server-Core",
      "Windows Server 2019 Datacenter": "2019-Datacenter",
      "Windows Server 2019 Datacenter Core": "2019-Datacenter-Server-Core",
      "Windows Server 2022 Datacenter": "2022-Datacenter",
      "Windows Server 2022 Datacenter Azure Edition": "2022-Datacenter-Azure-Edition",
      "Windows Server 2022 Datacenter Azure Edition Core": "2022-Datacenter-Azure-Edition-Core"
    },
    "osVersion": "[variables('osVersionMap')[parameters('OperatingSystem')]]",
    "securityTypeMap": {
      "Standard (Basic Level)": "Standard",
      "Trusted launch virtual machines": "TrustedLaunch"
    },
    "securityTypeSelection": "[variables('securityTypeMap')[parameters('securityType')]]",
    "securityProfileJson": {
      "uefiSettings": {
        "secureBootEnabled": true,
        "vTpmEnabled": true
      },
      "securityType": "[variables('securityTypeSelection')]"
    },
    "DeployAzureBastionMap": {
      "No": "No",
      "Yes - Basic SKU (Browser access)": "Basic",
      "Yes - Standard SKU (RDP Native Client access)": "Standard"
    },
    "DeployAzureBastionSelection": "[variables('DeployAzureBastionMap')[parameters('DeployAzureBastion')]]",
    "storageAccountName": "[format('{0}blob{1}', toLower(parameters('projectName')), uniqueString(resourceGroup().id))]",
    "storageBlobContainerName": "hivemq-cluster-container",
    "lbName": "[format('{0}-lb', parameters('projectName'))]",
    "lbPublicIpAddressName": "[format('{0}-lbPublicIP', parameters('projectName'))]",
    "lbFrontEndName": "LoadBalancerFrontEnd",
    "lbBackendPoolName": "LoadBalancerBackEndPool",
    "nsgName": "[format('{0}-nsg', parameters('projectName'))]",
    "bastionNsgName": "[format('{0}-bastionNsg', parameters('projectName'))]",
    "vNetName": "[format('{0}-vnet', parameters('projectName'))]",
    "vNetAddressPrefix": "10.1.0.0/16",
    "vNetSubnetName": "HiveMQSubnet",
    "vNetSubnetAddressPrefix": "10.1.0.0/24",
    "bastionName": "[format('{0}-bastion', parameters('projectName'))]",
    "bastionSubnetName": "AzureBastionSubnet",
    "vNetBastionSubnetAddressPrefix": "10.1.1.0/26",
    "bastionPublicIPAddressName": "[format('{0}-bastionPublicIP', parameters('projectName'))]",
    "vmStorageAccountType": "StandardSSD_LRS",
    "extensionName": "GuestAttestation",
    "extensionPublisher": "Microsoft.Azure.Security.WindowsAttestation",
    "extensionVersion": "1.0",
    "maaTenantName": "GuestAttestation",
    "maaEndpoint": "[substring('emptyString', 0, 0)]",
    "ascReportingEndpoint": "[substring('emptystring', 0, 0)]",
    "natGatewayName": "[format('{0}-natgateway', parameters('projectName'))]",
    "natGatewayPublicIPAddressName": "[format('{0}-natPublicIP', parameters('projectName'))]",
    "setupScriptLink": "https://raw.githubusercontent.com/diegoduarte-hivemq/arm-quickstart-templates/main/hivemq-win-vm-cluster/scripts/hivemq_node_setup.ps1"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2023-01-01",
      "name": "[variables('storageAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "accessTier": "Hot"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2023-01-01",
      "name": "[format('{0}/{1}', variables('storageAccountName'), 'default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2023-01-01",
      "name": "[format('{0}/{1}/{2}', variables('storageAccountName'), 'default', variables('storageBlobContainerName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageAccountName'), 'default')]"
      ]
    },
    {
      "copy": {
        "name": "hivemq_node_networkInterface",
        "count": "[length(range(0, variables('numberOfHivemqNodes')))]"
      },
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2023-04-01",
      "name": "[format('{0}-node{1}-nic', parameters('projectName'), range(0, variables('numberOfHivemqNodes'))[copyIndex()])]",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vNetName'), variables('vNetSubnetName'))]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('lbName'), variables('lbBackendPoolName'))]"
                }
              ]
            }
          }
        ],
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
        },
        "enableAcceleratedNetworking": "[variables('AcceleratedNetworkingSelection')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/loadBalancers', variables('lbName'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vNetName'), variables('vNetSubnetName'))]"
      ]
    },
    {
      "type": "Microsoft.Compute/availabilitySets",
      "apiVersion": "2023-09-01",
      "name": "[format('{0}-as', parameters('projectName'))]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Aligned"
      },
      "properties": {
        "platformFaultDomainCount": 3,
        "platformUpdateDomainCount": 1
      }
    },
    {
      "copy": {
        "name": "hivemq_node",
        "count": "[length(range(0, variables('numberOfHivemqNodes')))]"
      },
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2023-09-01",
      "name": "[format('{0}-node{1}', parameters('projectName'), range(0, variables('numberOfHivemqNodes'))[copyIndex()])]",
      "location": "[parameters('location')]",
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', format('{0}-as', parameters('projectName')))]"
        },
        "hardwareProfile": {
          "vmSize": "[variables('virtualMachineSizeSpecs')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "[variables('osVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "[variables('vmStorageAccountType')]"
            }
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-node{1}-nic', parameters('projectName'), range(0, variables('numberOfHivemqNodes'))[copyIndex()]))]"
            }
          ]
        },
        "osProfile": {
          "computerName": "[format('{0}-node{1}', parameters('projectName'), range(0, variables('numberOfHivemqNodes'))[copyIndex()])]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "windowsConfiguration": {
            "enableAutomaticUpdates": true,
            "provisionVMAgent": true
          }
        },
        "securityProfile": "[if(equals(variables('securityTypeSelection'), 'TrustedLaunch'), variables('securityProfileJson'), null())]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/availabilitySets', format('{0}-as', parameters('projectName')))]",
        "hivemq_node_networkInterface"
      ]
    },
    {
      "copy": {
        "name": "hivemq_node_setup",
        "count": "[length(range(0, variables('numberOfHivemqNodes')))]"
      },
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2023-09-01",
      "name": "[format('{0}-node{1}/InstallHiveMQ', parameters('projectName'), range(0, variables('numberOfHivemqNodes'))[copyIndex()])]",
      "location": "[parameters('location')]",
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "CustomScriptExtension",
        "typeHandlerVersion": "1.10",
        "autoUpgradeMinorVersion": true,
        "protectedSettings": {
          "fileUris": [
            "[variables('setupScriptLink')]"
          ],
          "commandToExecute": "[format('powershell.exe -ExecutionPolicy Bypass -File hivemq_node_setup.ps1 \"{0}\" \"{1}\" \"{2}\" -Scope Process -Force', parameters('hivemqVersion'), format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix=core.windows.net', variables('storageAccountName'), listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2023-01-01').keys[0].value), variables('storageBlobContainerName'))]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', variables('storageAccountName'), 'default', variables('storageBlobContainerName'))]",
        "hivemq_node",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    },
    {
      "copy": {
        "name": "hivemq_node_GuestAttestation",
        "count": "[length(range(0, variables('numberOfHivemqNodes')))]"
      },
      "condition": "[and(equals(parameters('securityType'), 'TrustedLaunch'), and(equals(variables('securityProfileJson').uefiSettings.secureBootEnabled, true()), equals(variables('securityProfileJson').uefiSettings.vTpmEnabled, true())))]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2023-09-01",
      "name": "[format('{0}-node{1}/GuestAttestation', parameters('projectName'), range(0, variables('numberOfHivemqNodes'))[copyIndex()])]",
      "location": "[parameters('location')]",
      "properties": {
        "publisher": "[variables('extensionPublisher')]",
        "type": "[variables('extensionName')]",
        "typeHandlerVersion": "[variables('extensionVersion')]",
        "autoUpgradeMinorVersion": true,
        "enableAutomaticUpgrade": true,
        "settings": {
          "AttestationConfig": {
            "MaaSettings": {
              "maaEndpoint": "[variables('maaEndpoint')]",
              "maaTenantName": "[variables('maaTenantName')]"
            },
            "AscSettings": {
              "ascReportingEndpoint": "[variables('ascReportingEndpoint')]",
              "ascReportingFrequency": ""
            },
            "useCustomToken": "false",
            "disableAlerts": "false"
          }
        }
      },
      "dependsOn": [
        "hivemq_node"
      ]
    },
    {
      "type": "Microsoft.Network/natGateways",
      "apiVersion": "2023-04-01",
      "name": "[variables('natGatewayName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "idleTimeoutInMinutes": 4,
        "publicIpAddresses": [
          {
            "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('natGatewayPublicIPAddressName'))]"
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('natGatewayPublicIPAddressName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2023-04-01",
      "name": "[variables('natGatewayPublicIPAddressName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAddressVersion": "IPv4",
        "publicIPAllocationMethod": "Static",
        "idleTimeoutInMinutes": 4
      }
    },
    {
      "condition": "[not(equals(variables('DeployAzureBastionSelection'), 'No'))]",
      "type": "Microsoft.Network/virtualNetworks/subnets",
      "apiVersion": "2023-04-01",
      "name": "[format('{0}/{1}', variables('vNetName'), variables('bastionSubnetName'))]",
      "properties": {
        "addressPrefix": "[variables('vNetBastionSubnetAddressPrefix')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vNetName'), variables('vNetSubnetName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vNetName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/virtualNetworks/subnets",
      "apiVersion": "2023-04-01",
      "name": "[format('{0}/{1}', variables('vNetName'), variables('vNetSubnetName'))]",
      "properties": {
        "addressPrefix": "[variables('vNetSubnetAddressPrefix')]",
        "natGateway": {
          "id": "[resourceId('Microsoft.Network/natGateways', variables('natGatewayName'))]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/natGateways', variables('natGatewayName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vNetName'))]"
      ]
    },
    {
      "condition": "[not(equals(variables('DeployAzureBastionSelection'), 'No'))]",
      "type": "Microsoft.Network/bastionHosts",
      "apiVersion": "2023-04-01",
      "name": "[variables('bastionName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[variables('DeployAzureBastionSelection')]"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "IpConf",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('bastionPublicIPAddressName'))]"
              },
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vNetName'), variables('bastionSubnetName'))]"
              }
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('bastionPublicIPAddressName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vNetName'), variables('bastionSubnetName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vNetName'))]"
      ]
    },
    {
      "condition": "[not(equals(variables('DeployAzureBastionSelection'), 'No'))]",
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2021-08-01",
      "name": "[variables('bastionPublicIPAddressName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAddressVersion": "IPv4",
        "publicIPAllocationMethod": "Static"
      }
    },
    {
      "condition": "[equals(variables('DeployAzureBastionSelection'), 'Standard')]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2023-04-01",
      "name": "[variables('bastionNsgName')]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "AllowHttpsInBound",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "Internet",
              "destinationPortRange": "443",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "AllowGatewayManagerInBound",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "GatewayManager",
              "destinationPortRange": "443",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 110,
              "direction": "Inbound"
            }
          },
          {
            "name": "AllowLoadBalancerInBound",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "AzureLoadBalancer",
              "destinationPortRange": "443",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 120,
              "direction": "Inbound"
            }
          },
          {
            "name": "AllowBastionHostCommunicationInBound",
            "properties": {
              "protocol": "*",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationPortRanges": [
                "8080",
                "5701"
              ],
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 130,
              "direction": "Inbound"
            }
          },
          {
            "name": "DenyAllInBound",
            "properties": {
              "protocol": "*",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationPortRange": "*",
              "destinationAddressPrefix": "*",
              "access": "Deny",
              "priority": 1000,
              "direction": "Inbound"
            }
          },
          {
            "name": "AllowSshRdpOutBound",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationPortRanges": [
                "22",
                "3389"
              ],
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 100,
              "direction": "Outbound"
            }
          },
          {
            "name": "AllowAzureCloudCommunicationOutBound",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationPortRange": "443",
              "destinationAddressPrefix": "AzureCloud",
              "access": "Allow",
              "priority": 110,
              "direction": "Outbound"
            }
          },
          {
            "name": "AllowBastionHostCommunicationOutBound",
            "properties": {
              "protocol": "*",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationPortRanges": [
                "8080",
                "5701"
              ],
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 120,
              "direction": "Outbound"
            }
          },
          {
            "name": "AllowGetSessionInformationOutBound",
            "properties": {
              "protocol": "*",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "Internet",
              "destinationPortRanges": [
                "80",
                "443"
              ],
              "access": "Allow",
              "priority": 130,
              "direction": "Outbound"
            }
          },
          {
            "name": "DenyAllOutBound",
            "properties": {
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Deny",
              "priority": 1000,
              "direction": "Outbound"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/loadBalancers",
      "apiVersion": "2023-04-01",
      "name": "[variables('lbName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[variables('lbFrontEndName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('lbPublicIpAddressName'))]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('lbBackendPoolName')]"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "MQTT-Rule",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('lbName'), variables('lbFrontEndName'))]"
              },
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('lbName'), variables('lbBackendPoolName'))]"
              },
              "frontendPort": 1883,
              "backendPort": 1883,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "protocol": "Tcp",
              "enableTcpReset": false,
              "loadDistribution": "SourceIPProtocol",
              "disableOutboundSnat": true,
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('lbName'), 'healthProbeMQTT')]"
              }
            }
          },
          {
            "name": "ControlCenter-Rule",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('lbName'), variables('lbFrontEndName'))]"
              },
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('lbName'), variables('lbBackendPoolName'))]"
              },
              "frontendPort": 8080,
              "backendPort": 8080,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "protocol": "Tcp",
              "enableTcpReset": false,
              "loadDistribution": "SourceIPProtocol",
              "disableOutboundSnat": true,
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('lbName'), 'healthProbeControlCenter')]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "healthProbeMQTT",
            "properties": {
              "protocol": "Tcp",
              "port": 1883,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          },
          {
            "name": "healthProbeControlCenter",
            "properties": {
              "protocol": "Tcp",
              "port": 8080,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          }
        ],
        "outboundRules": []
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('lbPublicIpAddressName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2023-04-01",
      "name": "[variables('lbPublicIpAddressName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAddressVersion": "IPv4",
        "publicIPAllocationMethod": "Static"
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2023-04-01",
      "name": "[variables('nsgName')]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "AllowMQTTInbound",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "1883",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "AllowControlCenterInbound",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "8080",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 110,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2023-04-01",
      "name": "[variables('vNetName')]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('vNetAddressPrefix')]"
          ]
        }
      }
    }
  ],
  "outputs": {
    "location": {
      "type": "string",
      "value": "[parameters('location')]"
    },
    "name": {
      "type": "string",
      "value": "[variables('lbName')]"
    },
    "resourceGroupName": {
      "type": "string",
      "value": "[resourceGroup().name]"
    },
    "resourceId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Network/loadBalancers', variables('lbName'))]"
    },
    "availabilitySetId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Compute/availabilitySets', format('{0}-as', parameters('projectName')))]"
    }
  }
}